#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to heapify a subtree rooted at node i
void heapify(int arr[], int n, int i) {
    int largest = i;        // Initialize largest as root
    int left = 2 * i + 1;   // Left child
    int right = 2 * i + 2;  // Right child

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // If right child is larger than largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);

        // Recursively heapify the affected subtree
        heapify(arr, n, largest);
    }
}

// Function to perform heap sort
void heapSort(int arr[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Extract elements from heap one by one
    for (int i = n - 1; i >= 0; i--) {
        // Move current root to end
        swap(&arr[0], &arr[i]);

        // Call heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

// Function to print an array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Main function
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: \n");
    printArray(arr, n);

    heapSort(arr, n);

    printf("Sorted array: \n");
    printArray(arr, n);

    return 0;
}
Heapify: Ensures the subtree rooted at a node is a max heap.
Build Max Heap: Converts the array into a max heap.
Extract Elements: Repeatedly removes the largest element (root) and places it at the end of the array.
Time Complexity:
Building the heap: 


#include <stdio.h>

void hashing(int elements[], int hashtable[], int length) {
    int iterations = 0;

    for (int i = 0; i < length; i++) {
        int index = elements[i] % length;

        printf("\n[ DEBUG ] Iteration %d.. | Inserting element %d at index %d\n", 
               iterations, elements[i], index);

        iterations++;

        // Handle collisions using linear probing
        while (hashtable[index] != 0) {
            index = (index + 1) % length;
        }

        hashtable[index] = elements[i];
    }
}

int main() {
    int elements[] = {23, 43, 13, 27, 36, 51, 50, 57};
    int hashtable[8] = {0}; // Initialize all elements to 0
    int length = 8;

    // Call the hashing function
    hashing(elements, hashtable, length);

    // Print the final hash table
    printf("\n[-] Final Hash Table\n\n");
    for (int i = 0; i < length; i++) {
        printf(" %d\n --\n", hashtable[i]);
    }

    printf("\n-------------------------------------\n");

    return 0;
}






